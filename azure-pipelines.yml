# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
# pool: 
#   vmImage: ubuntu-latest 
pool:
  name: default
  demands:
   - agent.name -equals self-linux


trigger:
- none

# pr:
#   branches:
#     include:
#     - Docker/*
#     - helm/*
    
#   # paths:
#   #   exclude:
#   #   - README.md

variables:
- group: incubation-lab


stages:
  - stage: mediawiki
    displayName: mediawiki
    jobs:
      - job: mediawiki
        steps:
        - task: CopyFiles@2
          inputs:
            SourceFolder: 'docker'
            Contents: '**'
            TargetFolder: '$(build.artifactstagingdirectory)'
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'drop'
            downloadPath: '$(System.ArtifactsDirectory)'

        - task: Docker@2
          inputs:
            containerRegistry: 'shivani-acr'
            repository: 'mediawiki'
            command: 'buildAndPush'
            Dockerfile: 'docker/Dockerfile'
        # - task: Docker@2
        #   inputs:
        #     containerRegistry: 'azure acr'
        #     repository: 'mediawiki'
        #     command: 'buildAndPush'
        #     Dockerfile: 'docker/Dockerfile'
        - task: AzureCLI@2
          displayName: set context
          inputs:
            azureSubscription: 'shivani-personal'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az account set --subscription 7cec1366-0ad8-4568-b32b-391336281545
              az acr list
              str=$(az acr credential show -n testincubation.azurecr.io --resource-group incubation-lab --query passwords[0].value)
              echo $str
              temp=`echo "$str" | tr -d '"'`
              echo $temp
        - task: CmdLine@2
          displayName: Install Snyk for ACR
          inputs:
                  script: |
                    
                    #sudo  npm install -g snyk
                    #sudo  npm install -g snyk-to-html
                    #sudo apt-get install npm -g snyk
                    #sudo apt-get install npm -g snyk-to-html
                    snyk config set api='f7fca78f-ffd4-4607-bf68-a86048b829aa'
                    snyk container test 'mediawiki' --username='incubation-lab' --password='$temp' --json | snyk-to-html -o 'mediawikii.html'
                    mkdir -p /test
                    yes | cp -rf mediawikii.html /test/mediawikii.html
                    ls /test
        - task: CopyFiles@2
          displayName: Copy test result file to artifact
          inputs: 
                  #SourceFolder: '/test' 
                  Contents: '*.html'
                  TargetFolder: '/home/vsts/work/1/a'

        - task: PublishBuildArtifacts@1
          displayName: Publish DAST test results
          inputs:
                  PathtoPublish: '/test'
                  ArtifactName: 'DASTReport'
                  publishLocation: 'Container'
        - task: Bash@3
          displayName: configure external secret
          inputs:
            targetType: 'inline'
            script: |
              kubectl apply -f external-secrets/external-secrets.yaml
        - task: HelmDeploy@0
          inputs:
            command: 'package'
            chartPath: 'helm'
            arguments: '--version 0.0.$(Build.BuildId)'   
          

        - task: HelmDeploy@0
          inputs:
            connectionType: 'Azure Resource Manager'
            azureSubscription: 'shivani-personal'
            azureResourceGroup: 'featuresss'
            kubernetesCluster: 'featuresss-testd-aks'
            namespace: 'default'
            command: 'upgrade'
            chartType: 'FilePath'
            chartPath: '$(System.ArtifactsDirectory)/wikimedia-0.0.$(Build.BuildId).tgz'
            releaseName: 'release-wiki'
            valueFile: 'override.yaml'
            arguments: '--install'

        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              export HELM_EXPERIMENTAL_OCI=1
              helm registry login featuressstestdacr.azurecr.io --username $(clientid) --password $(clientsecret)
              helm push $(System.ArtifactsDirectory)/wikimedia-0.0.$(Build.BuildId).tgz oci://featuressstestdacr.azurecr.io/helm
  - stage: staging
    jobs:
    - deployment: Deploy
      displayName: deploy 
      
      condition: succeeded()
      pool:
        name: default
        demands:
        - agent.name -equals self-linux
      # creates an environment if it doesn't exist
      environment: 'incubation-lab-k8s'
      # CODE TO DEPLOY IN PRE_PROD        

  - stage: Prod
    jobs:
    - deployment: Deploy
      displayName: deploy 
      
      condition: succeeded()
      pool:
        name: default
        demands:
        - agent.name -equals self-linux
      # creates an environment if it doesn't exist
      environment: 'incubation-lab-k8s'
      # CODE TO DEPLOY IN PROD


              
        

